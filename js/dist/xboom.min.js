// Templates
this["XBOOMTemplates"] = this["XBOOMTemplates"] || {};

this["XBOOMTemplates"]["js/src/movies/templates/MovieListTemplate.html"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"navbar\">Xboom!</div>\n\n<div class=\"banner\">\n    <img src=\"http://ptmac:8080/vfs/";
  if (stack1 = helpers.thumbnail) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.thumbnail; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" width=\"100%\">\n    <div class=\"title\">";
  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div>\n</div>\n\n<div class=\"row row1\">\n    <div class=\"cell cell1\">\n        <div class=\"value\">Comedy</div>\n        <div class=\"field\">Genre</div>\n    </div>\n    <div class=\"cell cell2\">\n        <div class=\"value\">95</div>\n        <div class=\"field\">Minutes</div>\n    </div>\n    <div class=\"cell cell3\">\n        <div class=\"value\">2010</div>\n        <div class=\"field\">Year</div>\n    </div>\n</div>\n\n<div class=\"row row2\">\n    <div class=\"cell cell1\">\n        <div class=\"value\">135</div>\n        <div class=\"field\">Votes</div>\n    </div>\n    <div class=\"cell cell2\">\n        <div class=\"value\">7.5</div>\n        <div class=\"field\">Rating</div>\n    </div>\n    <div class=\"cell cell3\">\n        <div class=\"value\">Plot</div>\n        <div class=\"field\">Overview</div>\n    </div>\n</div>\n\n<div class=\"row row3\">\n    <div class=\"cell cell1\">T</div>\n    <div class=\"cell cell3\">></div>\n</div>";
  return buffer;
  });

this["XBOOMTemplates"]["js/src/settings/templates/SettingsTemplate.html"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"navbar\">Settings</div>\n\n\n<label>Host/IP:</label><input type=\"text\" value=\"";
  if (stack1 = helpers.host) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.host; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n<br>\n<label>Port:</label><input type=\"text\" value=\"";
  if (stack1 = helpers.port) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.port; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n<br>\n<button class=\"js-save\">Save</button>\n<button class=\"js-cancel\">Cancel</button>";
  return buffer;
  });

var xboom = {
	Templates: XBOOMTemplates || {},
	Models: {},
	Collections: {},
	Views: {},
	Routers: {}
};

// Application
xboom.LayoutManager = _.extend({
    initialize: function() {
        this.$el = $('body');
        this._views = [];
        this._pos = 1;
    },
    add: function(view) {
        if (!this.viewExists(view)) {
            var i = this._views.push(view);
            console.log(i);
            this.$el.find('.region-' + i).append(view.el);
            this.updatePos();
        }
    },
    remove: function(view) {
        this._views.pop();
        this.updatePos();
    },
    viewExists: function(view) {
        var exists = _.find(this._views, function(v) {
            return v.cid == view.cid;
        });

        return exists ? true : false;
    },
    updatePos: function() {
        var pos = this._views.length;
        if (pos != this._pos) {
            this.$el.removeClass('pos-' + this._pos).addClass('pos-' + pos);
            this._pos = pos;
        }
    },
    showSettings: function() {
        this.$el.removeClass('pos-' + this._pos).addClass('pos-0');
    },
    hideSettings: function() {
        this.$el.addClass('pos-' + this._pos).removeClass('pos-0');
    }
}, Backbone.Events);


// Movies
xboom.Models.Movie = Backbone.Model.extend({

});
xboom.Collections.Movies = Backbone.Collection.extend({
    localStorage: new Backbone.LocalStorage('libMovies'),
    model: xboom.Models.Movie,
    parse: function() {
        return JSON.parse(localStorage.getItem('libMovies'));
    }
});
xboom.Views.MovieList = Backbone.View.extend({
    className: 'MovieList view',
    template: xboom.Templates['js/src/movies/templates/MovieListTemplate.html'],
    initialize: function() {
        this.collection = new xboom.Collections.Movies();
        this.listenTo(this.collection, 'reset add destroy change', this.render);
        this.collection.fetch({reset: true});
    },
    render: function() {
        var m = this.collection.models[0];

        this.$el.append(this.template(m));

        return this;
    }
});






// Settings
xboom.Models.Settings = Backbone.Model.extend({
	localStorage: new Backbone.LocalStorage('settings'),
	parse: function(d) {
		d = JSON.parse(localStorage.getItem('settings'));
		return d;
	}
});
xboom.Views.Settings = Backbone.View.extend({
    className: 'Settings view',
    template: xboom.Templates['js/src/settings/templates/SettingsTemplate.html'],
    events: {
        'click .js-cancel': 'onCancel'
    },
    initialize: function() {
        _.bindAll(this);

        this.model = new xboom.Models.Settings();
        this.model.fetch({
            success: this.render
        });
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    onCancel: function(e) {
        e.preventDefault();
    }
});
