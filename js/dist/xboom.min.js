// Templates
this["XBOOMTemplates"] = this["XBOOMTemplates"] || {};

this["XBOOMTemplates"]["js/src/movies/templates/MovieInfoTemplate.html"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n	<div class=\"cell genre\">\n		"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\n	</div>\n\n";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"cell cast\">\n		"
    + escapeExpression(((stack1 = depth0.name),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n	</div>\n\n";
  return buffer;
  }

  buffer += "<!-- <div class=\"navbar\"><img src=\"img/logo.jpg\" width=\"40%\"></div> -->\n\n<div class=\"banner\">   \n    <!-- <div class=\"title\">";
  if (stack1 = helpers.label) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.label; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div> -->\n    <img src=\"";
  if (stack1 = helpers.thumbnail) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.thumbnail; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" width=\"100%\">   \n</div>\n\n<div class=\"row row1\">\n	<div class=\"cell cell1\">\n        <div class=\"title\">";
  if (stack1 = helpers.label) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.label; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div>\n    </div>\n    <div class=\"cell cell2\">\n        <div class=\"rating\">Ratings: 7</div>\n    </div>\n</div>\n\n<div class=\"row row2\" id=\"plot\">";
  if (stack1 = helpers.plot) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.plot; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div>\n\n<div class =\"row row3\">Genre</div>\n\n<div class =\"row row4\">\n\n";
  stack1 = helpers.each.call(depth0, depth0.genre, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n<div class =\"row row5\">Cast</div>\n\n";
  stack1 = helpers.each.call(depth0, depth0.cast, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</div>";
  return buffer;
  });

this["XBOOMTemplates"]["js/src/movies/templates/MovieListTemplate.html"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n\n<div data-movieid=\"";
  if (stack1 = helpers.movieid) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.movieid; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"cell movie js-movie\">\n    <img src=\"";
  if (stack1 = helpers.thumbnail) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.thumbnail; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" width=\"100%\">\n<!--     <div class=\"title\">";
  if (stack1 = helpers.label) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.label; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div> -->\n</div>\n\n";
  return buffer;
  }

  buffer += "<!-- <div class=\"navbar\">\n    <a href=\"\" class=\"js-settings\">\n        <img src=\"img/menu.png\" height=\"30px\">\n    </a>\n    <img src=\"img/logo.jpg\" height=\"30px\">\n</div> -->\n\n";
  stack1 = helpers.each.call(depth0, depth0.models, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  });

this["XBOOMTemplates"]["js/src/movies/templates/MovieTemplate.html"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<!-- <div class=\"navbar\">\n    <a href=\"\" class=\"js-back\">\n        <img src=\"img/menu.png\" height=\"30px\">\n    </a>\n    <img src=\"img/logo.jpg\" height=\"30px\">\n</div> -->\n\n<div class=\"banner\">   \n    <!-- <div class=\"title\">";
  if (stack1 = helpers.label) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.label; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div> -->\n    <img src=\"";
  if (stack1 = helpers.thumbnail) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.thumbnail; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" width=\"100%\">   \n</div>\n\n<div class=\"row row1\">\n    <div class=\"cell cell1 js-play\">\n        <div class=\"value\"><img src=\"img/play.png\"></div>\n    </div>\n    <div class=\"cell cell2 js-info\">\n        <div class=\"value\"><img src=\"img/info.png\"></div>\n    </div>\n    <div class=\"cell cell3 js-remote\">\n        <div class=\"value\"><img src=\"img/trailer.png\"><a href=\"\"></a></div>\n    </div>\n</div>\n\n<!-- <div class=\"row row2\">\n    <div class=\"cell cell1\"><img src=\"img/trailer.png\"></div>\n    <div class=\"cell cell3\"><img src=\"img/play.png\"></div>\n</div> -->\n";
  return buffer;
  });

this["XBOOMTemplates"]["js/src/movies/templates/RemoteControlTemplate.html"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"js-left\">\n	<img src=\"img/arrow_left.png\" height=\"50px\">\n</div>\n<div class=\"js-up\">\n	<img src=\"img/arrow_up.png\" height=\"50px\">\n</div>\n<div class=\"js-right\">\n	<img src=\"img/arrow_right.png\" height=\"50px\">\n</div>\n<div class=\"js-down\">\n	<img src=\"img/arrow_down.png\" height=\"50px\">\n</div>\n";
  });

this["XBOOMTemplates"]["js/src/settings/templates/SettingsTemplate.html"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"navbar\">Settings</div>\n\n\n<label>Host/IP:</label><input type=\"text\" name=\"host\" value=\"";
  if (stack1 = helpers.host) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.host; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n<br>\n<label>Port:</label><input type=\"text\" name=\"port\" value=\"";
  if (stack1 = helpers.port) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.port; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n<br>\n<button class=\"js-save\">Save</button>\n<button class=\"js-cancel\">Cancel</button>";
  return buffer;
  });

var xboom = {
	Templates: XBOOMTemplates || {},
	Models: {},
	Collections: {},
	Views: {},
	Routers: {}
};

// Application
xboom.LayoutManager = Backbone.View.extend({
    events: {
        'click .navbar .js-settings': 'showSettings'
    },
    initialize: function() {
        // this.$el = $('body');
        this._views = [];
        this._pos = 1;
    },
    add: function(view) {
        if (!this.viewExists(view)) {
            var i = this._views.push(view);
            this.$el.find('.region-' + i).append(view.el).css('display', 'block');

            var _this = this;
            setTimeout(function() {
                _this.updatePos();    
            }, 0);
            

            if (i > 1) {
                var _this = this;
                setTimeout(function() {
                    _this.$el.find('.region-' + (i-1)).css('display', 'none');
                }, 310);
            }
        }
    },
    remove: function(view, callback) {
        this._views.pop();
        var l = this._views.length;

        this.$el.find('.region-' + l).css('display', 'block');

        var _this = this;
        setTimeout(function() {
            _this.updatePos();    
        }, 0);
        
        setTimeout(function() {
            _this.$el.find('.region-' + (l+1)).css('display', 'none');
            if (callback) {
                callback();
            }
        }, 310);
    },
    viewExists: function(view) {
        var exists = _.find(this._views, function(v) {
            return v.cid == view.cid;
        });

        return exists ? true : false;
    },
    updatePos: function() {
        var pos = this._views.length;
        if (pos != this._pos) {
            this.$el.removeClass('pos-' + this._pos).addClass('pos-' + pos);
            this._pos = pos;
        }
    },
    showSettings: function(e) {
        e.preventDefault();
        this.$el.removeClass('pos-' + this._pos).addClass('pos-0');
    },
    hideSettings: function() {
        this.$el.addClass('pos-' + this._pos).removeClass('pos-0');
    }
});


// Movies
xboom.Models.Movie = Backbone.Model.extend({

});
xboom.Collections.Movies = Backbone.Collection.extend({
    localStorage: new Backbone.LocalStorage('libMovies'),
    model: xboom.Models.Movie,
    parse: function() {
        return JSON.parse(localStorage.getItem('libMovies'));
    }
});
xboom.Views.MovieList = Backbone.View.extend({
    className: 'MovieList view',
    template: xboom.Templates['js/src/movies/templates/MovieListTemplate.html'],
    events: {
        'click .js-movie': 'onMovieSelected'
    },
    initialize: function() {
        this.collection = new xboom.Collections.Movies();
        this.listenTo(this.collection, 'reset add destroy change', this.render);
        this.collection.fetch({reset: true});
    },
    render: function() {
        var data = {};
        data.models = this.collection.toJSON();
        this.$el.html(this.template(data));
        return this;
    },
    onMovieSelected: function(e) {
        var movieid = this.$(e.currentTarget).attr('data-movieid');
        var movieData = _.find(this.collection.models, function(m) {
            if (m.get('movieid') == movieid) {
                return true;
            }
            return false;
        });

        var movie = new xboom.Views.Movie({model: movieData});
    }
});


xboom.Views.Movie = Backbone.View.extend({
    className: 'Movie view',
    template: xboom.Templates['js/src/movies/templates/MovieTemplate.html'],
    events: {
        'click .js-info': 'onInfo',
        'click .js-back': 'onBack',
        'click .js-play': 'onPlay',
        'click .js-remote': 'onRemote'
    },
    initialize: function() {
        this.render();
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        app.add(this);
        return this;
    },
    onInfo: function(e) {
        var movieInfo = new xboom.Views.MovieInfo({model: this.model});
    },
    onBack: function(e) {
        e.preventDefault();
        var _this = this;
        app.remove(this, function() {
            _this.remove();
        });
    },
    onPlay: function() {
        xbmc.Controls.open(this.model.toJSON());
    },
    onRemote: function() {
        console.log('snowy');
        var remoteControl = new xboom.Views.RemoteControl({});
    }
});


xboom.Views.MovieInfo = Backbone.View.extend({
    className: 'MovieInfo view',
    template: xboom.Templates['js/src/movies/templates/MovieInfoTemplate.html'],
    initialize: function() {
        this.render();
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        app.add(this);
        return this;
    }
});


xboom.Views.RemoteControl = Backbone.View.extend({
    className: 'RemoteControl view',
    template: xboom.Templates['js/src/movies/templates/RemoteControlTemplate.html'],
    events: {
        'click .js-right': 'onRight',
        'click .js-up': 'onUp',
        'click .js-left': 'onLeft',
        'click .js-down': 'onDown'
    },
    initialize: function() {
        this.render();
    },
    render: function() {
        this.$el.html(this.template());
        xboom.LayoutManager.add(this);
        return this;
    },
    onRight: function() {
        console.log('you clicked right');
    },
    onUp: function() {
        console.log('you clicked up');
    },
    onLeft: function() {
        console.log('you clicked left');
    },
    onDown: function() {
        console.log('you clicked down');
    }
});




// Settings
xboom.Models.Settings = Backbone.Model.extend({
	localStorage: new Backbone.LocalStorage('settings'),
	parse: function(d) {
		d = JSON.parse(localStorage.getItem('settings'));
		return d;
	}
});
xboom.Views.Settings = Backbone.View.extend({
    className: 'Settings view',
    template: xboom.Templates['js/src/settings/templates/SettingsTemplate.html'],
    events: {
        'click .js-save': 'onSave',
        'click .js-cancel': 'onCancel'
    },
    initialize: function() {
        _.bindAll(this);

        this.model = new xboom.Models.Settings();
        this.model.fetch({
            success: this.render
        });
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    onCancel: function(e) {
        e.preventDefault();
        app.hideSettings();
    },
    onSave: function(e) {
        e.preventDefault();
        this.model.set('host', this.$('[name=host]').val());
        this.model.set('port', this.$('[name=port]').val());
        localStorage.setItem('settings', JSON.stringify(this.model.toJSON()));
        app.hideSettings();
    }
});
